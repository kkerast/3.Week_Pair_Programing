function solution(N, arr1) {
  let x = [1, -1, 0, 0, 1, 1, -1, -1];
  let y = [0, 0, 1, -1, 1, -1, 1, -1];
  let answer = [];

  for (let i = 0; i < N; i++) {
    //배열을 반복하기위해

    let temp = []; //한줄 지뢰찾기가 끝났을때 저장하기 위한 변수
    for (let j = 0; j < N; j++) {
      if (!isNaN(arr1[i][j])) {
        //배열에 숫자(지뢰)가 있다면 *을 추가하기
        temp.push("*");
      } else {
        //지뢰가 없다면 주변 8개 지역 확인해서 지뢰 총 개수 구하기
        let sum = 0; //지뢰 총 개수가 저장될 변수
        for (let k = 0; k < 8; k++) {
          //지뢰(8방향)반복문으로 탐색하기
          if (i + x[k] >= 0 && j + y[k] >= 0 && i + x[k] < N && j + y[k] < N) {
            // 배열은 0보다 작을수없고 입력받은N보다 클수없기에 and 연산자로 조건 탐지
            if (!isNaN(arr1[i + x[k]][j + y[k]])) {
              //8방향 탐색중 숫자를 찾았다면
              sum += Number(arr1[i + x[k]][j + y[k]]); //sum에 지뢰 숫자를 더하기
            }
          }
        }
        temp.push(sum <= 10 ? sum : "M"); // 지뢰 총합이 10이 넘었다면 M으로 표현하기
      }
    }
    //console.log(temp);
    answer.push(temp);
  }

  return answer;
}

let N = 5;
let arr1 = [
  ["1", ".", ".", ".", "."],
  [".", ".", "3", ".", "."],
  [".", ".", ".", ".", "."],
  [".", "4", ".", ".", "."],
  [".", ".", ".", "9", "."],
];

let answer = [
  ["*", "4", "3", "3", "0"],
  ["1", "4", "*", "3", "0"],
  ["4", "7", "7", "3", "0"],
  ["4", "*", "M", "9", "9"],
  ["4", "4", "M", "*", "9"],
];
console.log(solution(N, arr1));
